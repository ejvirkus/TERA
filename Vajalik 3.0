#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
import time
import serial
from sensor_msgs.msg import LaserScan

# Ensure the serial port and baudrate are correct for your Arduino
try:
    arduino = serial.Serial(port='/dev/ttyACM0', baudrate=115200, timeout=1)
except serial.SerialException as e:
    print(f"Error opening serial port: {e}")
    arduino = None

def send_to_arduino(data):
    if arduino:
        arduino.write(data.encode())
        time.sleep(0.05)
        print(f"Sent to Arduino: {data}")
    else:
        print("Arduino not connected")

def read_arduino():
    if arduino:
        info = arduino.readline()
        if info:
            info = info.decode()
            print("Received from Arduino: ", info)
        else:
            print("No info received from Arduino")
    else:
        print("Arduino not connected")

class ScanSubscriber(Node):

    def __init__(self):
        super().__init__('scan_subscriber')
        self.subscription = self.create_subscription(
            LaserScan,
            '/scan',
            self.scan_callback,
            10)
        self.subscription  # prevent unused variable warning
        print("ScanSubscriber node has been started")

    def scan_callback(self, scan_msg):
        ranges = scan_msg.ranges

        # Extract a specific range of data
        start_mid = 100
        end_mid = 128
        extracted_data = ranges[start_mid:end_mid]

        # Find the minimum value in the extracted data
        min_distance = min(extracted_data)

        # Determine action based on the minimum value
        if min_distance < 1:
            no = '1'
        else:
            no = '0'

        send_to_arduino(no)
        read_arduino()


def main(args=None):
    rclpy.init(args=args)
    print("ROS2 initialization completed")

    scan_subscriber = ScanSubscriber()
    print("Created ScanSubscriber instance")

    try:
        rclpy.spin(scan_subscriber)
    except KeyboardInterrupt:
        pass

    scan_subscriber.destroy_node()
    rclpy.shutdown()
    print("ROS2 shutdown completed")


if __name__ == '__main__':
    main()
